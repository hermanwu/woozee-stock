import { Injectable } from '@angular/core';
import { StockData } from 'src/app/stock/services/stock-data.model';
import { FactType } from '../models/fact-type.enum';
import { Term } from '../models/risk-level.model';
import { Risk } from '../models/risk.model';

@Injectable({
  providedIn: 'root',
})
export class AutoGeneratedRiskService {
  constructor() {}

  getProfitabilityRisks(stock: StockData): Risk[] {
    const risks: Risk[] = [];
    if (stock.quarterGrossProfitGrowth < stock.quarterExpensesGrowth) {
      risks.push({
        type: FactType.profit,
        content: `${stock.displayName}'s operating margin is decreasing.`,
        level: Term.short,
      });
    }

    if (stock.quarterOperatingCostOverGrossProfit > 1) {
      risks.push({
        type: FactType.profit,
        content: `${stock.displayName} is not able to earn income.`,
        level: Term.short,
      });
    }

    return risks;
  }

  getGrowthRisks(stock: StockData): Risk[] {
    const risks: Risk[] = [];

    if (stock.quarterRevenueGrowth < 0.1) {
      risks.push({
        type: FactType.growth,
        content: `${stock.displayName}'s revenue growth is only single digit.`,
        level: Term.long,
      });
    } else if (
      stock.quarterRevenueGrowth / stock.yearOverYearRevenueGrowth <
      0.5
    ) {
      risks.push({
        type: FactType.growth,
        content: `${stock.displayName}'s revenue growth slows down significantly`,
        level: Term.short,
      });
    }

    return risks;
  }
}
